<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Swagger3与SpringBoot</title>
    <link href="/2020/swagger3-yu-springboot/"/>
    <url>/2020/swagger3-yu-springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="Swagger3与SpringBoot整合"><a href="#Swagger3与SpringBoot整合" class="headerlink" title="Swagger3与SpringBoot整合"></a>Swagger3与SpringBoot整合</h1><h2 id="导入swagger依赖"><a href="#导入swagger依赖" class="headerlink" title="导入swagger依赖"></a>导入swagger依赖</h2><pre><code class="xml">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter --&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;    </code></pre><h2 id="Springboot启动类"><a href="#Springboot启动类" class="headerlink" title="Springboot启动类"></a>Springboot启动类</h2><p>添加注解@EnableOpenApi</p><pre><code class="java">package com.springcloud;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import springfox.documentation.oas.annotations.EnableOpenApi;@SpringBootApplication@EnableOpenApipublic class PaymentMain8001 {    public static void main(String[] args) {        SpringApplication.run(PaymentMain8001.class, args);    }}</code></pre><h2 id="Swagger配置类"><a href="#Swagger配置类" class="headerlink" title="Swagger配置类"></a>Swagger配置类</h2><pre><code class="java">package com.springcloud.conf;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;@Configurationpublic class SwaggerConfig {    @Bean    public Docket docket() {        return new Docket(DocumentationType.OAS_30)                .apiInfo(new ApiInfoBuilder()                        .contact(new Contact(&quot;pen&quot;, &quot;&quot;, &quot;aa@163.com&quot;))                        .title(&quot;Swagger项目&quot;)                        .build()                )                .select()                .apis(RequestHandlerSelectors.any())                .paths(PathSelectors.any())                .build();    }}</code></pre><p><code>Docket(DocumentationType.OAS_30)</code> ,我们这里选择的参数是 <code>DocumentationType.OAS_30</code> ,这是一个Swagger实例的接口文档版本，我们这里是3.0，所以选择用 <code>OAS_30</code> ，其他的类型还有如下几种，分别对应着Swagger历史版本</p><pre><code class="java">public static final DocumentationType SWAGGER_12 = new DocumentationType(&quot;swagger&quot;, &quot;1.2&quot;);public static final DocumentationType SWAGGER_2 = new DocumentationType(&quot;swagger&quot;, &quot;2.0&quot;);public static final DocumentationType OAS_30 = new DocumentationType(&quot;openApi&quot;, &quot;3.0&quot;);</code></pre><h2 id="Swagger常用注解"><a href="#Swagger常用注解" class="headerlink" title="Swagger常用注解"></a>Swagger常用注解</h2><pre><code>@Api：用在请求的类上，表示对类的说明    tags=&quot;说明该类的作用，可以在UI界面上看到的注解&quot;    value=&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;@ApiOperation：用在请求的方法上，说明方法的用途、作用    value=&quot;说明方法的用途、作用&quot;    notes=&quot;方法的备注说明&quot;@ApiImplicitParams：用在请求的方法上，表示一组参数说明    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面        name：参数名        value：参数的汉字说明、解释        required：参数是否必须传        paramType：参数放在哪个地方            · header --&gt; 请求参数的获取：@RequestHeader            · query --&gt; 请求参数的获取：@RequestParam            · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable            · body（不常用）            · form（不常用）        dataType：参数类型，默认String，其它值dataType=&quot;Integer&quot;               defaultValue：参数的默认值@ApiResponses：用在请求的方法上，表示一组响应    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息        code：数字，例如400        message：信息，例如&quot;请求参数没填好&quot;        response：抛出异常的类@ApiModel：用于响应类上，表示一个返回响应数据的信息            （这种一般用在post创建的时候，使用@RequestBody这样的场景，            请求参数无法使用@ApiImplicitParam注解进行描述的时候）    @ApiModelProperty：用在属性上，描述响应类的属性</code></pre><h2 id="在实体类添加注解"><a href="#在实体类添加注解" class="headerlink" title="在实体类添加注解"></a>在实体类添加注解</h2><pre><code class="java">package com.springcloud.entities;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.io.Serializable;@Data@AllArgsConstructor@NoArgsConstructor@ApiModel(&quot;支付实体&quot;)public class Payment implements Serializable {    @ApiModelProperty(&quot;id&quot;)    private Long id;    @ApiModelProperty(&quot;serial&quot;)    private String serial;}</code></pre><h2 id="在Controller层添加注解"><a href="#在Controller层添加注解" class="headerlink" title="在Controller层添加注解"></a>在Controller层添加注解</h2><pre><code class="java">package com.springcloud.controller;import com.springcloud.entities.CommonResult;import com.springcloud.entities.Payment;import com.springcloud.service.PaymentService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RestController;@Api(value = &quot;支付相关接口&quot;)@RestController@Slf4jpublic class PaymentController {    @Autowired    private PaymentService paymentService;    @ApiOperation(value = &quot;新增支付&quot;, notes = &quot;返回一个result&quot;)    @PostMapping(value = &quot;/payment/create&quot;)    public CommonResult create(Payment payment) {        int result = paymentService.create(payment);        log.info(&quot;插入结果: {}&quot;, result);        if (result &gt; 0) {            return new CommonResult(200, &quot;新建成功&quot;, result);        } else {            return new CommonResult(444, &quot;新建失败&quot;, result);        }    }    @ApiOperation(value = &quot;查询支付&quot;, notes = &quot;返回一个Payment&quot;)    @GetMapping(value = &quot;/payment/get/{id}&quot;)    public CommonResult getPaymentById(@PathVariable(&quot;id&quot;) Long id) {        Payment payment = paymentService.getPaymentById(id);        log.info(&quot;插入结果: {}&quot;, payment);        if (payment != null) {            return new CommonResult(200, &quot;查询成功&quot;, payment);        } else {            return new CommonResult(444, &quot;查询失败&quot;, payment);        }    }}</code></pre><h2 id="启动UI"><a href="#启动UI" class="headerlink" title="启动UI"></a>启动UI</h2><p>Swagger3.0版本的地址是<a href="http://localhost:8088/swagger-ui/index.html" target="_blank" rel="noopener">http://localhost:8088/swagger-ui/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swagger</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
